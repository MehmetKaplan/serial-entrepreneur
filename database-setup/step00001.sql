\connect SerialEntDB;

--    ____                           _   _                  _                   
--   / ___| ___ _ __   ___ _ __ __ _| |_(_)_ __   __ _     / \   _ __ ___  __ _ 
--  | |  _ / _ \ '_ \ / _ \ '__/ _` | __| | '_ \ / _` |   / _ \ | '__/ _ \/ _` |
--  | |_| |  __/ | | |  __/ | | (_| | |_| | | | | (_| |  / ___ \| | |  __/ (_| |
--   \____|\___|_| |_|\___|_|  \__,_|\__|_|_| |_|\__, | /_/   \_\_|  \___|\__,_|
--                                               |___/                          
create user SerialEntrepreneurApp encrypted password 'SerialEntrepreneurApp.';

grant connect on database "SerialEntDB" to SerialEntrepreneurApp;

create schema SerialEntrepreneur authorization SerialEntrepreneurApp;

create table SerialEntrepreneur.User_Registrations (
	id integer generated by default as identity primary key,
	comfirmation_code varchar(20),
	name varchar(100),
	email varchar(200),
	password varchar(200),
	created_at timestamp default now()
);

grant all on SerialEntrepreneur.User_Registrations to SerialEntrepreneurApp;

create index User_Registrations_idx1 on SerialEntrepreneur.User_Registrations (comfirmation_code);

create table SerialEntrepreneur.Users (
	id integer generated by default as identity primary key,
	name varchar(100),
	email varchar(200),
	password varchar(200),
	generated_at timestamp default current_timestamp,
	deleted_at timestamp,
	state char(1)
);

grant all on SerialEntrepreneur.Users to SerialEntrepreneurApp;

alter table
	SerialEntrepreneur.Users
add
	constraint cons_SerialEntrepreneur check (state in ('a', 'd'));

create index Users_idx1 on SerialEntrepreneur.Users (email);

create table SerialEntrepreneur.Subscriptions (
	id integer generated by default as identity primary key,
	customer_id integer,
	state char(1),
	valid_from timestamp,
	valid_to timestamp
);

grant all on SerialEntrepreneur.Subscriptions to SerialEntrepreneurApp;

alter table
	SerialEntrepreneur.Subscriptions
add
	constraint fk_subscriptions_SerialEntrepreneur foreign key (customer_id) references SerialEntrepreneur.Users(id);

alter table
	SerialEntrepreneur.Subscriptions
add
	constraint cons_subscriptions check (state in ('a', 'd'));

create table SerialEntrepreneur.Subscription_Payments (
	id integer generated by default as identity primary key,
	subscription_id integer,
	state char(1),
	executed_at timestamp,
	amount decimal(10, 3)
);

grant all on SerialEntrepreneur.Subscription_Payments to SerialEntrepreneurApp;

alter table
	SerialEntrepreneur.Subscription_Payments
add
	constraint fk_subscription_payments_subscriptions foreign key (subscription_id) references SerialEntrepreneur.Subscriptions(id);

-- (c)ompleted, (p)ending
alter table
	SerialEntrepreneur.Subscription_Payments
add
	constraint cons_subscription_payments check (state in ('c', 'p'));